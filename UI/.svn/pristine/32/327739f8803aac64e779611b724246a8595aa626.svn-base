//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18052
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.ClientFunctions {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://network/", ConfigurationName="ClientFunctions.ClientFunction")]
    public interface ClientFunction {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/registerClientRequest", ReplyAction="http://network/ClientFunction/registerClientResponse")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        void registerClient(string arg0, string arg1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/registerClientRequest", ReplyAction="http://network/ClientFunction/registerClientResponse")]
        System.Threading.Tasks.Task registerClientAsync(string arg0, string arg1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/updateClientPositionRequest", ReplyAction="http://network/ClientFunction/updateClientPositionResponse")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        void updateClientPosition(string arg0, int arg1, int arg2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/updateClientPositionRequest", ReplyAction="http://network/ClientFunction/updateClientPositionResponse")]
        System.Threading.Tasks.Task updateClientPositionAsync(string arg0, int arg1, int arg2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/updateClientTileCountRequest", ReplyAction="http://network/ClientFunction/updateClientTileCountResponse")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        void updateClientTileCount(string arg0, int arg1, int arg2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://network/ClientFunction/updateClientTileCountRequest", ReplyAction="http://network/ClientFunction/updateClientTileCountResponse")]
        System.Threading.Tasks.Task updateClientTileCountAsync(string arg0, int arg1, int arg2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ClientFunctionChannel : UI.ClientFunctions.ClientFunction, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientFunctionClient : System.ServiceModel.ClientBase<UI.ClientFunctions.ClientFunction>, UI.ClientFunctions.ClientFunction {
        
        public ClientFunctionClient() {
        }
        
        public ClientFunctionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientFunctionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientFunctionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientFunctionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void registerClient(string arg0, string arg1) {
            base.Channel.registerClient(arg0, arg1);
        }
        
        public System.Threading.Tasks.Task registerClientAsync(string arg0, string arg1) {
            return base.Channel.registerClientAsync(arg0, arg1);
        }
        
        public void updateClientPosition(string arg0, int arg1, int arg2) {
            base.Channel.updateClientPosition(arg0, arg1, arg2);
        }
        
        public System.Threading.Tasks.Task updateClientPositionAsync(string arg0, int arg1, int arg2) {
            return base.Channel.updateClientPositionAsync(arg0, arg1, arg2);
        }
        
        public void updateClientTileCount(string arg0, int arg1, int arg2) {
            base.Channel.updateClientTileCount(arg0, arg1, arg2);
        }
        
        public System.Threading.Tasks.Task updateClientTileCountAsync(string arg0, int arg1, int arg2) {
            return base.Channel.updateClientTileCountAsync(arg0, arg1, arg2);
        }
    }
}
